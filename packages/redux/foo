yarn run v1.3.2
$ flow check
Error: src/epics/entity-recognition-result/index.js:47
                                           v----------
 47:   const finalSpeechRecognitionText$ = mostSample(
 48:     text => text,
 49:     finalSpeechRecognitionIndex$,
 50:     speechRecognitionText$,
 51:   );
       ^ call of `mostSample`. Function cannot be called on any member of intersection type
 47:   const finalSpeechRecognitionText$ = mostSample(
                                           ^^^^^^^^^^ intersection
  Member 1:
                                     v---------
  323: declare export function sample<A, B, R>(
  324:   fn: (a: A, b: B) => R,
  325:   sampler: Stream<any>,
  ...:
  328: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:323
  Error:
                                             v----------
   47:   const finalSpeechRecognitionText$ = mostSample(
   48:     text => text,
   49:     finalSpeechRecognitionIndex$,
   50:     speechRecognitionText$,
   51:   );
         ^ call of `mostSample`. Too few arguments passed to
                                     v---------
  323: declare export function sample<A, B, R>(
  324:   fn: (a: A, b: B) => R,
  325:   sampler: Stream<any>,
  ...:
  328: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:323
  Member 2:
                                     v------------
  329: declare export function sample<A, B, C, R>(
  330:   fn: (a: A, b: B, c: C) => R,
  331:   sampler: Stream<any>,
  ...:
  335: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:329
  Error:
                                             v----------
   47:   const finalSpeechRecognitionText$ = mostSample(
   48:     text => text,
   49:     finalSpeechRecognitionIndex$,
   50:     speechRecognitionText$,
   51:   );
         ^ call of `mostSample`. Too few arguments passed to
                                     v------------
  329: declare export function sample<A, B, C, R>(
  330:   fn: (a: A, b: B, c: C) => R,
  331:   sampler: Stream<any>,
  ...:
  335: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:329
  Member 3:
                                     v---------------
  336: declare export function sample<A, B, C, D, R>(
  337:   fn: (a: A, b: B, c: C, d: D) => R,
  338:   sampler: Stream<any>,
  ...:
  343: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:336
  Error:
                                             v----------
   47:   const finalSpeechRecognitionText$ = mostSample(
   48:     text => text,
   49:     finalSpeechRecognitionIndex$,
   50:     speechRecognitionText$,
   51:   );
         ^ call of `mostSample`. Too few arguments passed to
                                     v---------------
  336: declare export function sample<A, B, C, D, R>(
  337:   fn: (a: A, b: B, c: C, d: D) => R,
  338:   sampler: Stream<any>,
  ...:
  343: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:336
  Member 4:
                                     v------------------
  344: declare export function sample<A, B, C, D, E, R>(
  345:   fn: (a: A, b: B, c: C, d: D, e: E) => R,
  346:   sampler: Stream<any>,
  ...:
  352: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:344
  Error:
                                             v----------
   47:   const finalSpeechRecognitionText$ = mostSample(
   48:     text => text,
   49:     finalSpeechRecognitionIndex$,
   50:     speechRecognitionText$,
   51:   );
         ^ call of `mostSample`. Too few arguments passed to
                                     v------------------
  344: declare export function sample<A, B, C, D, E, R>(
  345:   fn: (a: A, b: B, c: C, d: D, e: E) => R,
  346:   sampler: Stream<any>,
  ...:
  352: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:344

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     35:     epicEntityRecognitionResult(opts, action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          6: export default (payload: ServiceEntityRecognitionResult) => ({ type, payload });
                                                                          ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/entity-recognition-result.js:6
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              6: export default (payload: ServiceEntityRecognitionResult) => ({ type, payload });
                                                                              ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/entity-recognition-result.js:6
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     37:     epicIncrementDietMatchQuantityBy(action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          6: export default (payload: ServiceMatch) => ({ type, payload });
                                                        ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-match.js:6
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              6: export default (payload: ServiceMatch) => ({ type, payload });
                                                            ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-match.js:6
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     38:     epicLoadFoods(action$),
             ^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          6: export default (payload: ServiceFood) => ({ type, payload });
                                                       ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/load-foods.js:6
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              6: export default (payload: ServiceFood) => ({ type, payload });
                                                           ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/load-foods.js:6
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     43:     epicSetAudioInputId(opts, action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          5: export default (payload: ?number) => ({ type, payload });
                                                   ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-audio-input-id.js:5
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              5: export default (payload: ?number) => ({ type, payload });
                                                       ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-audio-input-id.js:5
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     44:     epicSetDietMatchNutritionData(action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          6: export default (payload: ImmutableFoodNutritionData) => ({ type, payload });
                                                                      ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-diet-match-nutrition-data.js:6
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              6: export default (payload: ImmutableFoodNutritionData) => ({ type, payload });
                                                                          ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-diet-match-nutrition-data.js:6
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     45:     epicSetDietTotalMatchNutritionData(action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          6: export default (payload: ImmutableFoodNutritionData) => ({ type, payload });
                                                                      ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-diet-total-match-nutrition-data.js:6
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              6: export default (payload: ImmutableFoodNutritionData) => ({ type, payload });
                                                                          ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-diet-total-match-nutrition-data.js:6
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     46:     epicSetIsEditing(action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          5: export default (payload: boolean) => ({ type, payload });
                                                   ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-is-editing.js:5
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              5: export default (payload: boolean) => ({ type, payload });
                                                       ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-is-editing.js:5
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     47:     epicSetFoods(action$),
             ^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          6: export default (payload: ServiceFoodNutritionData) => ({ type, payload });
                                                                    ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-foods.js:6
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              6: export default (payload: ServiceFoodNutritionData) => ({ type, payload });
                                                                        ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-foods.js:6
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     48:     epicSetMatch(action$),
             ^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
                                             v-------------------------------
         31:           matches.push(mostJust(actionSetMatch(immutableFromJS({
         32:             result: { index: result.index },
         33:             segment: { index: i, value: segment },
         34:           }))));
                       --^ object literal. This type is incompatible with. See: src/epics/set-match/index.js:31
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
                                                 v-------------------------------
             31:           matches.push(mostJust(actionSetMatch(immutableFromJS({
             32:             result: { index: result.index },
             33:             segment: { index: i, value: segment },
             34:           }))));
                           --^ property `payload`. Property not found in. See: src/epics/set-match/index.js:31
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     49:     epicSetMatches(action$),
             ^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          5: export default (payload: any) => ({ type, payload });
                                               ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-matches.js:5
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              5: export default (payload: any) => ({ type, payload });
                                                   ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-matches.js:5
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     50:     epicSetPermission(opts, action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          5: export default (payload: boolean) => ({ type, payload });
                                                   ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-permission.js:5
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              5: export default (payload: boolean) => ({ type, payload });
                                                       ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-permission.js:5
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     52:     epicSetSpeechRecognitionText(opts, action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          5: export default (payload: any) => ({ type, payload });
                                               ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/set-speech-recognition-text.js:5
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              5: export default (payload: any) => ({ type, payload });
                                                   ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/set-speech-recognition-text.js:5
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/root/index.js:33
                      v
 33:   mostMergeArray([
 34:     epicCancelSpeechRecognition(opts, action$),
 35:     epicEntityRecognitionResult(opts, action$),
...:
 60:   ])
       ^ array literal. This type is incompatible with the expected param type of
241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                    ^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/most/lib/index.js.flow:241
  Type argument `T` is incompatible:
     53:     epicStartEditing(action$),
             ^^^^^^^^^^^^^^^^^^^^^^^^^ Stream. Has some incompatible type argument with
    241: declare export function mergeArray<A>(streams: Array<Stream<A>>): Stream<A>;
                                                              ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:241
      Type argument `A` is incompatible:
          5: export default (payload: boolean) => ({ type, payload });
                                                   ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with. See: src/actions/request-set-is-editing.js:5
          5: export default () => ({ type });
                                   ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5
          Property `payload` is incompatible:
              5: export default (payload: boolean) => ({ type, payload });
                                                       ^^^^^^^^^^^^^^^^^ property `payload`. Property not found in. See: src/actions/request-set-is-editing.js:5
              5: export default () => ({ type });
                                       ^^^^^^^^ object literal. See: src/actions/cancel-speech-recognition.js:5

Error: src/epics/set-diet-match-nutrition-data/index.js:66
 66:       const nutritionData = calculate(foods, new ImmutableList([foodPortion]));
                                                                    ^^^^^^^^^^^^^ unused function argument. No arguments are expected by
669: declare class UpdatableInCollection<K, +V> {
                   ^^^^^^^^^^^^^^^^^^^^^ default constructor. See: ../../node_modules/immutable/dist/immutable.js.flow:669

Error: src/epics/set-diet-match-nutrition-data/index.js:68
                                   v
 68:       return new ImmutableMap({
 69:         result: new ImmutableMap({
 70:           index: dietMatch.getIn(['result', 'index']),
...:
 76:       });
           ^ unused function argument. No arguments are expected by
669: declare class UpdatableInCollection<K, +V> {
                   ^^^^^^^^^^^^^^^^^^^^^ default constructor. See: ../../node_modules/immutable/dist/immutable.js.flow:669

Error: src/epics/set-diet-match-nutrition-data/index.js:69
                                      v
 69:         result: new ImmutableMap({
 70:           index: dietMatch.getIn(['result', 'index']),
 71:         }),
             ^ unused function argument. No arguments are expected by
669: declare class UpdatableInCollection<K, +V> {
                   ^^^^^^^^^^^^^^^^^^^^^ default constructor. See: ../../node_modules/immutable/dist/immutable.js.flow:669

Error: src/epics/set-diet-match-nutrition-data/index.js:74
 74:           value: new ImmutableMap({ nutritionData }),
                                       ^^^^^^^^^^^^^^^^^ unused function argument. No arguments are expected by
669: declare class UpdatableInCollection<K, +V> {
                   ^^^^^^^^^^^^^^^^^^^^^ default constructor. See: ../../node_modules/immutable/dist/immutable.js.flow:669

Error: src/epics/set-foods/index.js:27
 27:     (foods, newFoods) => foods.mergeDeep(immutableFromJS(newFoods)),
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rest parameter array of call of method `mergeDeep`. Has some incompatible type argument with
896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: ../../node_modules/immutable/dist/immutable.js.flow:896
  Type argument `T` is incompatible:
     27:     (foods, newFoods) => foods.mergeDeep(immutableFromJS(newFoods)),
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ mixed. This type is incompatible with
    896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: `Iterable` | `PlainObjInput`. See: ../../node_modules/immutable/dist/immutable.js.flow:896
      Member 1:
      896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                                ^^^^^^^^^^^^^^^^^^ Iterable. See: ../../node_modules/immutable/dist/immutable.js.flow:896
      Error:
       27:     (foods, newFoods) => foods.mergeDeep(immutableFromJS(newFoods)),
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ mixed. This type is incompatible with
      896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                                ^^^^^^^^^^^^^^^^^^ $Iterable. See: ../../node_modules/immutable/dist/immutable.js.flow:896
        Property `@@iterator` is incompatible:
          896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                                    ^^^^^^^^^^^^^^^^^^ property `@@iterator` of `$Iterable`. Property not found in. See: ../../node_modules/immutable/dist/immutable.js.flow:896
           27:     (foods, newFoods) => foods.mergeDeep(immutableFromJS(newFoods)),
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ mixed
      Member 2:
      896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                                                     ^^^^^^^^^^^^^^^^^^^^^ PlainObjInput. See: ../../node_modules/immutable/dist/immutable.js.flow:896
      Error:
       27:     (foods, newFoods) => foods.mergeDeep(immutableFromJS(newFoods)),
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ mixed. This type is incompatible with
      896:     ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]
                                                     ^^^^^^^^^^^^^^^^^^^^^ PlainObjInput. See: ../../node_modules/immutable/dist/immutable.js.flow:896

Error: src/epics/set-foods/index.js:34
 34:     foods$,
         ^^^^^^ Stream. This type is incompatible with the expected param type of
228: declare export function map<A, B>(f: (a: A) => B, s: Stream<A>): Stream<B>;
                                                          ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:228
  Type argument `A` is incompatible:
     27:     (foods, newFoods) => foods.mergeDeep(immutableFromJS(newFoods)),
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map. Inexact type is incompatible with exact type
      6: export default (payload: ServiceFoodNutritionData) => ({ type, payload });
                                  ^^^^^^^^^^^^^^^^^^^^^^^^ ServiceFoodNutritionData. See: src/actions/set-foods.js:6

Error: src/epics/set-foods/index.js:34
 34:     foods$,
         ^^^^^^ Stream. This type is incompatible with the expected param type of
228: declare export function map<A, B>(f: (a: A) => B, s: Stream<A>): Stream<B>;
                                                          ^^^^^^^^^ Stream. See: ../../node_modules/most/lib/index.js.flow:228
  Type argument `A` is incompatible:
     28:     new ImmutableMap(),
             ^^^^^^^^^^^^^^^^^^ Map. Inexact type is incompatible with exact type
      6: export default (payload: ServiceFoodNutritionData) => ({ type, payload });
                                  ^^^^^^^^^^^^^^^^^^^^^^^^ ServiceFoodNutritionData. See: src/actions/set-foods.js:6

Error: src/epics/set-match/index.js:31
                                                    v----------------
 31:           matches.push(mostJust(actionSetMatch(immutableFromJS({
 32:             result: { index: result.index },
 33:             segment: { index: i, value: segment },
 34:           }))));
               -^ mixed. This type is incompatible with the expected param type of
  6: export default (payload: ServiceMatch) => ({ type, payload });
                              ^^^^^^^^^^^^ ServiceMatchDiet. See: src/actions/set-match.js:6

Error: src/epics/start-recording/index.js:51
         v----------------
 51:     mostCombineArray(
 52:       (wantsToStart, hasAudioInputId, hasPermission) => wantsToStart && hasAudioInputId && hasPermission,
 53:       [wantsToStart$, hasAudioInputId$, hasPermission$],
 54:     ),
         ^ call of `mostCombineArray`. Could not decide which case to select
 51:     mostCombineArray(
         ^^^^^^^^^^^^^^^^ intersection type
  Case 2 may work:
                                           v------------
  274: declare export function combineArray<A, B, C, R>(
  275:   fn: (a: A, b: B, c: C) => R,
  276:   streams: [Stream<A>, Stream<B>, Stream<C>]
  277: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:274
  But if it doesn't, case 5 looks promising too:
                                           v-------
  286: declare export function combineArray<V, R> (
  287:   fn: (...items: V[]) => R,
  288:   items: Stream<V>[]
  289: ): Stream<R>;
       -----------^ function type. See: ../../node_modules/most/lib/index.js.flow:286
  Please provide additional annotation(s) to determine whether case 2 works (or consider merging it with case 5):
   53:       [wantsToStart$, hasAudioInputId$, hasPermission$],
                             ^^^^^^^^^^^^^^^^ hasAudioInputId$
   53:       [wantsToStart$, hasAudioInputId$, hasPermission$],
                                               ^^^^^^^^^^^^^^ hasPermission$
   53:       [wantsToStart$, hasAudioInputId$, hasPermission$],
              ^^^^^^^^^^^^^ wantsToStart$

Error: src/types/DietMatchNutritionData.js:3
  3: import type { FoodNutritionData } from './FoodNutritionData';
                                            ^^^^^^^^^^^^^^^^^^^^^ ./FoodNutritionData. Required module not found

Error: src/types/ImmutableFoodNutritionData.js:3
  3: import type { RecordInstance as ImmutableRecordInstance } from 'immutable';
                   ^^^^^^^^^^^^^^ Named import from module `immutable`. This module has no named export called `RecordInstance`.

Error: test/fixtures/matches/index.js:27
                                                                            v
 27: export const foodMatchTwoScrambled: ServiceEntityRecognitionResponse = {
 28:   text: '2 scrambled eggs',
 29:   entities: {
...:
 46: };
     ^ object literal. This type is incompatible with
 27: export const foodMatchTwoScrambled: ServiceEntityRecognitionResponse = {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     34:   translations: [{
     35:     segments: [{
     36:       type: 0,
    ...:
     45:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         34:   translations: [{
         35:     segments: [{
         36:       type: 0,
        ...:
         45:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             35:     segments: [{
             36:       type: 0,
             37:       value: {
            ...:
             44:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 35:     segments: [{
                 36:       type: 0,
                 37:       value: {
                ...:
                 44:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                     37:       value: {
                     38:         foodPortions: [{
                     39:           foodID: foodScrambledEggs.foodID,
                    ...:
                     43:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                         37:       value: {
                         38:         foodPortions: [{
                         39:           foodID: foodScrambledEggs.foodID,
                        ...:
                         43:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:27
                                                                            v
 27: export const foodMatchTwoScrambled: ServiceEntityRecognitionResponse = {
 28:   text: '2 scrambled eggs',
 29:   entities: {
...:
 46: };
     ^ object literal. This type is incompatible with
 27: export const foodMatchTwoScrambled: ServiceEntityRecognitionResponse = {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     34:   translations: [{
     35:     segments: [{
     36:       type: 0,
    ...:
     45:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         34:   translations: [{
         35:     segments: [{
         36:       type: 0,
        ...:
         45:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             35:     segments: [{
             36:       type: 0,
             37:       value: {
            ...:
             44:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 35:     segments: [{
                 36:       type: 0,
                 37:       value: {
                ...:
                 44:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                     37:       value: {
                     38:         foodPortions: [{
                     39:           foodID: foodScrambledEggs.foodID,
                    ...:
                     43:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                         37:       value: {
                         38:         foodPortions: [{
                         39:           foodID: foodScrambledEggs.foodID,
                        ...:
                         43:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:48
                                                                     v
 48: export const foodMatchBacon: ServiceEntityRecognitionResponse = {
 49:   text: 'Bacon',
 50:   entities: {
...:
 67: };
     ^ object literal. This type is incompatible with
 48: export const foodMatchBacon: ServiceEntityRecognitionResponse = {
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     55:   translations: [{
     56:     segments: [{
     57:       type: 0,
    ...:
     66:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         55:   translations: [{
         56:     segments: [{
         57:       type: 0,
        ...:
         66:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             56:     segments: [{
             57:       type: 0,
             58:       value: {
            ...:
             65:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 56:     segments: [{
                 57:       type: 0,
                 58:       value: {
                ...:
                 65:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                     58:       value: {
                     59:         foodPortions: [{
                     60:           foodID: foodBacon.foodID,
                    ...:
                     64:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                         58:       value: {
                         59:         foodPortions: [{
                         60:           foodID: foodBacon.foodID,
                        ...:
                         64:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:48
                                                                     v
 48: export const foodMatchBacon: ServiceEntityRecognitionResponse = {
 49:   text: 'Bacon',
 50:   entities: {
...:
 67: };
     ^ object literal. This type is incompatible with
 48: export const foodMatchBacon: ServiceEntityRecognitionResponse = {
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     55:   translations: [{
     56:     segments: [{
     57:       type: 0,
    ...:
     66:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         55:   translations: [{
         56:     segments: [{
         57:       type: 0,
        ...:
         66:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             56:     segments: [{
             57:       type: 0,
             58:       value: {
            ...:
             65:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 56:     segments: [{
                 57:       type: 0,
                 58:       value: {
                ...:
                 65:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                     58:       value: {
                     59:         foodPortions: [{
                     60:           foodID: foodBacon.foodID,
                    ...:
                     64:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                         58:       value: {
                         59:         foodPortions: [{
                         60:           foodID: foodBacon.foodID,
                        ...:
                         64:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:69
                                                                           v
 69: export const foodMatchBlackCoffee: ServiceEntityRecognitionResponse = {
 70:   text: 'Black coffee',
 71:   entities: {
...:
 88: };
     ^ object literal. This type is incompatible with
 69: export const foodMatchBlackCoffee: ServiceEntityRecognitionResponse = {
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     76:   translations: [{
     77:     segments: [{
     78:       type: 0,
    ...:
     87:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         76:   translations: [{
         77:     segments: [{
         78:       type: 0,
        ...:
         87:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             77:     segments: [{
             78:       type: 0,
             79:       value: {
            ...:
             86:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 77:     segments: [{
                 78:       type: 0,
                 79:       value: {
                ...:
                 86:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                     79:       value: {
                     80:         foodPortions: [{
                     81:           foodID: foodBlackCoffee.foodID,
                    ...:
                     85:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                         79:       value: {
                         80:         foodPortions: [{
                         81:           foodID: foodBlackCoffee.foodID,
                        ...:
                         85:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:69
                                                                           v
 69: export const foodMatchBlackCoffee: ServiceEntityRecognitionResponse = {
 70:   text: 'Black coffee',
 71:   entities: {
...:
 88: };
     ^ object literal. This type is incompatible with
 69: export const foodMatchBlackCoffee: ServiceEntityRecognitionResponse = {
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     76:   translations: [{
     77:     segments: [{
     78:       type: 0,
    ...:
     87:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         76:   translations: [{
         77:     segments: [{
         78:       type: 0,
        ...:
         87:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             77:     segments: [{
             78:       type: 0,
             79:       value: {
            ...:
             86:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 77:     segments: [{
                 78:       type: 0,
                 79:       value: {
                ...:
                 86:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                     79:       value: {
                     80:         foodPortions: [{
                     81:           foodID: foodBlackCoffee.foodID,
                    ...:
                     85:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                         79:       value: {
                         80:         foodPortions: [{
                         81:           foodID: foodBlackCoffee.foodID,
                        ...:
                         85:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:90
                                                                        v
 90: export const foodMatchACupOfOJ: ServiceEntityRecognitionResponse = {
 91:   text: 'A cup of OJ',
 92:   entities: {
...:
109: };
     ^ object literal. This type is incompatible with
 90: export const foodMatchACupOfOJ: ServiceEntityRecognitionResponse = {
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     97:   translations: [{
     98:     segments: [{
     99:       type: 0,
    ...:
    108:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         97:   translations: [{
         98:     segments: [{
         99:       type: 0,
        ...:
        108:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             98:     segments: [{
             99:       type: 0,
            100:       value: {
            ...:
            107:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 98:     segments: [{
                 99:       type: 0,
                100:       value: {
                ...:
                107:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    100:       value: {
                    101:         foodPortions: [{
                    102:           foodID: foodOrangeJuice.foodID,
                    ...:
                    106:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        100:       value: {
                        101:         foodPortions: [{
                        102:           foodID: foodOrangeJuice.foodID,
                        ...:
                        106:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:90
                                                                        v
 90: export const foodMatchACupOfOJ: ServiceEntityRecognitionResponse = {
 91:   text: 'A cup of OJ',
 92:   entities: {
...:
109: };
     ^ object literal. This type is incompatible with
 90: export const foodMatchACupOfOJ: ServiceEntityRecognitionResponse = {
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
     97:   translations: [{
     98:     segments: [{
     99:       type: 0,
    ...:
    108:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
         97:   translations: [{
         98:     segments: [{
         99:       type: 0,
        ...:
        108:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
             98:     segments: [{
             99:       type: 0,
            100:       value: {
            ...:
            107:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                 98:     segments: [{
                 99:       type: 0,
                100:       value: {
                ...:
                107:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    100:       value: {
                    101:         foodPortions: [{
                    102:           foodID: foodOrangeJuice.foodID,
                    ...:
                    106:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        100:       value: {
                        101:         foodPortions: [{
                        102:           foodID: foodOrangeJuice.foodID,
                        ...:
                        106:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:111
                                                                                   v
111: export const foodMatchMyRegularItalianSub: ServiceEntityRecognitionResponse = {
112:   text: 'My regular italian sub',
113:   entities: {
...:
144: };
     ^ object literal. This type is incompatible with
111: export const foodMatchMyRegularItalianSub: ServiceEntityRecognitionResponse = {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    124:   translations: [{
    125:     segments: [{
    126:       type: 0,
    ...:
    143:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        124:   translations: [{
        125:     segments: [{
        126:       type: 0,
        ...:
        143:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            125:     segments: [{
            126:       type: 0,
            127:       value: {
            ...:
            142:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                125:     segments: [{
                126:       type: 0,
                127:       value: {
                ...:
                142:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    127:       value: {
                    128:         foodPortions: [{
                    129:           foodID: foodItalianSub.foodID,
                    ...:
                    141:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        127:       value: {
                        128:         foodPortions: [{
                        129:           foodID: foodItalianSub.foodID,
                        ...:
                        141:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:111
                                                                                   v
111: export const foodMatchMyRegularItalianSub: ServiceEntityRecognitionResponse = {
112:   text: 'My regular italian sub',
113:   entities: {
...:
144: };
     ^ object literal. This type is incompatible with
111: export const foodMatchMyRegularItalianSub: ServiceEntityRecognitionResponse = {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    124:   translations: [{
    125:     segments: [{
    126:       type: 0,
    ...:
    143:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        124:   translations: [{
        125:     segments: [{
        126:       type: 0,
        ...:
        143:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            125:     segments: [{
            126:       type: 0,
            127:       value: {
            ...:
            142:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                125:     segments: [{
                126:       type: 0,
                127:       value: {
                ...:
                142:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    127:       value: {
                    128:         foodPortions: [{
                    129:           foodID: foodItalianSub.foodID,
                    ...:
                    141:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        127:       value: {
                        128:         foodPortions: [{
                        129:           foodID: foodItalianSub.foodID,
                        ...:
                        141:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:146
                                                                              v
146: export const foodMatchSomeBakedChips: ServiceEntityRecognitionResponse = {
147:   text: 'Some baked chips',
148:   entities: {
...:
165: };
     ^ object literal. This type is incompatible with
146: export const foodMatchSomeBakedChips: ServiceEntityRecognitionResponse = {
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    153:   translations: [{
    154:     segments: [{
    155:       type: 0,
    ...:
    164:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        153:   translations: [{
        154:     segments: [{
        155:       type: 0,
        ...:
        164:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            154:     segments: [{
            155:       type: 0,
            156:       value: {
            ...:
            163:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                154:     segments: [{
                155:       type: 0,
                156:       value: {
                ...:
                163:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    156:       value: {
                    157:         foodPortions: [{
                    158:           foodID: foodBakedPotatoChip.foodID,
                    ...:
                    162:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        156:       value: {
                        157:         foodPortions: [{
                        158:           foodID: foodBakedPotatoChip.foodID,
                        ...:
                        162:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:146
                                                                              v
146: export const foodMatchSomeBakedChips: ServiceEntityRecognitionResponse = {
147:   text: 'Some baked chips',
148:   entities: {
...:
165: };
     ^ object literal. This type is incompatible with
146: export const foodMatchSomeBakedChips: ServiceEntityRecognitionResponse = {
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    153:   translations: [{
    154:     segments: [{
    155:       type: 0,
    ...:
    164:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        153:   translations: [{
        154:     segments: [{
        155:       type: 0,
        ...:
        164:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            154:     segments: [{
            155:       type: 0,
            156:       value: {
            ...:
            163:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                154:     segments: [{
                155:       type: 0,
                156:       value: {
                ...:
                163:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    156:       value: {
                    157:         foodPortions: [{
                    158:           foodID: foodBakedPotatoChip.foodID,
                    ...:
                    162:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        156:       value: {
                        157:         foodPortions: [{
                        158:           foodID: foodBakedPotatoChip.foodID,
                        ...:
                        162:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:167
                                                                         v
167: export const foodMatchSodaWater: ServiceEntityRecognitionResponse = {
168:   text: 'Soda water',
169:   entities: {
...:
186: };
     ^ object literal. This type is incompatible with
167: export const foodMatchSodaWater: ServiceEntityRecognitionResponse = {
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    174:   translations: [{
    175:     segments: [{
    176:       type: 0,
    ...:
    185:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        174:   translations: [{
        175:     segments: [{
        176:       type: 0,
        ...:
        185:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            175:     segments: [{
            176:       type: 0,
            177:       value: {
            ...:
            184:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                175:     segments: [{
                176:       type: 0,
                177:       value: {
                ...:
                184:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    177:       value: {
                    178:         foodPortions: [{
                    179:           foodID: foodClubSoda.foodID,
                    ...:
                    183:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        177:       value: {
                        178:         foodPortions: [{
                        179:           foodID: foodClubSoda.foodID,
                        ...:
                        183:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:167
                                                                         v
167: export const foodMatchSodaWater: ServiceEntityRecognitionResponse = {
168:   text: 'Soda water',
169:   entities: {
...:
186: };
     ^ object literal. This type is incompatible with
167: export const foodMatchSodaWater: ServiceEntityRecognitionResponse = {
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    174:   translations: [{
    175:     segments: [{
    176:       type: 0,
    ...:
    185:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        174:   translations: [{
        175:     segments: [{
        176:       type: 0,
        ...:
        185:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            175:     segments: [{
            176:       type: 0,
            177:       value: {
            ...:
            184:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                175:     segments: [{
                176:       type: 0,
                177:       value: {
                ...:
                184:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    177:       value: {
                    178:         foodPortions: [{
                    179:           foodID: foodClubSoda.foodID,
                    ...:
                    183:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        177:       value: {
                        178:         foodPortions: [{
                        179:           foodID: foodClubSoda.foodID,
                        ...:
                        183:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:188
                                                                                 v
188: export const foodMatchALargeCaesarSalad: ServiceEntityRecognitionResponse = {
189:   text: 'A large Caesar salad',
190:   entities: {
...:
215: };
     ^ object literal. This type is incompatible with
188: export const foodMatchALargeCaesarSalad: ServiceEntityRecognitionResponse = {
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    198:   translations: [{
    199:     segments: [{
    200:       type: 0,
    ...:
    214:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        198:   translations: [{
        199:     segments: [{
        200:       type: 0,
        ...:
        214:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            199:     segments: [{
            200:       type: 0,
            201:       value: {
            ...:
            213:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                199:     segments: [{
                200:       type: 0,
                201:       value: {
                ...:
                213:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    201:       value: {
                    202:         foodPortions: [{
                    203:           foodID: foodCaesarSalad.foodID,
                    ...:
                    212:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        201:       value: {
                        202:         foodPortions: [{
                        203:           foodID: foodCaesarSalad.foodID,
                        ...:
                        212:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:188
                                                                                 v
188: export const foodMatchALargeCaesarSalad: ServiceEntityRecognitionResponse = {
189:   text: 'A large Caesar salad',
190:   entities: {
...:
215: };
     ^ object literal. This type is incompatible with
188: export const foodMatchALargeCaesarSalad: ServiceEntityRecognitionResponse = {
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    198:   translations: [{
    199:     segments: [{
    200:       type: 0,
    ...:
    214:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        198:   translations: [{
        199:     segments: [{
        200:       type: 0,
        ...:
        214:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            199:     segments: [{
            200:       type: 0,
            201:       value: {
            ...:
            213:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                199:     segments: [{
                200:       type: 0,
                201:       value: {
                ...:
                213:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    201:       value: {
                    202:         foodPortions: [{
                    203:           foodID: foodCaesarSalad.foodID,
                    ...:
                    212:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        201:       value: {
                        202:         foodPortions: [{
                        203:           foodID: foodCaesarSalad.foodID,
                        ...:
                        212:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:217
                                                                               v
217: export const foodMatchAGlassOfRedWine: ServiceEntityRecognitionResponse = {
218:   text: 'A glass of red wine',
219:   entities: {
...:
236: };
     ^ object literal. This type is incompatible with
217: export const foodMatchAGlassOfRedWine: ServiceEntityRecognitionResponse = {
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    224:   translations: [{
    225:     segments: [{
    226:       type: 0,
    ...:
    235:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        224:   translations: [{
        225:     segments: [{
        226:       type: 0,
        ...:
        235:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            225:     segments: [{
            226:       type: 0,
            227:       value: {
            ...:
            234:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                225:     segments: [{
                226:       type: 0,
                227:       value: {
                ...:
                234:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    227:       value: {
                    228:         foodPortions: [{
                    229:           foodID: foodRedWine.foodID,
                    ...:
                    233:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        227:       value: {
                        228:         foodPortions: [{
                        229:           foodID: foodRedWine.foodID,
                        ...:
                        233:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:217
                                                                               v
217: export const foodMatchAGlassOfRedWine: ServiceEntityRecognitionResponse = {
218:   text: 'A glass of red wine',
219:   entities: {
...:
236: };
     ^ object literal. This type is incompatible with
217: export const foodMatchAGlassOfRedWine: ServiceEntityRecognitionResponse = {
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    224:   translations: [{
    225:     segments: [{
    226:       type: 0,
    ...:
    235:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        224:   translations: [{
        225:     segments: [{
        226:       type: 0,
        ...:
        235:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            225:     segments: [{
            226:       type: 0,
            227:       value: {
            ...:
            234:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                225:     segments: [{
                226:       type: 0,
                227:       value: {
                ...:
                234:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    227:       value: {
                    228:         foodPortions: [{
                    229:           foodID: foodRedWine.foodID,
                    ...:
                    233:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        227:       value: {
                        228:         foodPortions: [{
                        229:           foodID: foodRedWine.foodID,
                        ...:
                        233:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8

Error: test/fixtures/matches/index.js:238
                                                                                        v
238: export const foodMatchEightyFourChickenNuggets: ServiceEntityRecognitionResponse = {
239:   text: '84 chicken nuggets',
240:   entities: {
...:
257: };
     ^ object literal. This type is incompatible with
238: export const foodMatchEightyFourChickenNuggets: ServiceEntityRecognitionResponse = {
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    245:   translations: [{
    246:     segments: [{
    247:       type: 0,
    ...:
    256:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        245:   translations: [{
        246:     segments: [{
        247:       type: 0,
        ...:
        256:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            246:     segments: [{
            247:       type: 0,
            248:       value: {
            ...:
            255:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                246:     segments: [{
                247:       type: 0,
                248:       value: {
                ...:
                255:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    248:       value: {
                    249:         foodPortions: [{
                    250:           foodID: foodChickenNugget.foodID,
                    ...:
                    254:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortion` is incompatible:
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `foodPortion`. Property not found in. See: src/types/ServiceTranslationSegmentDiet.js:8
                                          v
                        248:       value: {
                        249:         foodPortions: [{
                        250:           foodID: foodChickenNugget.foodID,
                        ...:
                        254:       },
                                   ^ object literal

Error: test/fixtures/matches/index.js:238
                                                                                        v
238: export const foodMatchEightyFourChickenNuggets: ServiceEntityRecognitionResponse = {
239:   text: '84 chicken nuggets',
240:   entities: {
...:
257: };
     ^ object literal. This type is incompatible with
238: export const foodMatchEightyFourChickenNuggets: ServiceEntityRecognitionResponse = {
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceEntityRecognitionResponse
  Property `translations` is incompatible:
                         v-
    245:   translations: [{
    246:     segments: [{
    247:       type: 0,
    ...:
    256:   }],
           -^ array literal. Has some incompatible type argument with
     11:   translations: ServiceTranslation[],
                         ^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceEntityRecognitionResponse.js:11
      Type argument `T` is incompatible:
                              v
        245:   translations: [{
        246:     segments: [{
        247:       type: 0,
        ...:
        256:   }],
               ^ object literal. This type is incompatible with
         11:   translations: ServiceTranslation[],
                             ^^^^^^^^^^^^^^^^^^ ServiceTranslation. See: src/types/ServiceEntityRecognitionResponse.js:11
          Property `segments` is incompatible:
                               v-
            246:     segments: [{
            247:       type: 0,
            248:       value: {
            ...:
            255:     }],
                     -^ array literal. Has some incompatible type argument with
              6:   segments: ServiceTranslationSegment[],
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/types/ServiceTranslation.js:6
              Type argument `T` is incompatible:
                                    v
                246:     segments: [{
                247:       type: 0,
                248:       value: {
                ...:
                255:     }],
                         ^ object literal. This type is incompatible with
                  6:   segments: ServiceTranslationSegment[],
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ ServiceTranslationSegmentDiet. See: src/types/ServiceTranslation.js:6
                  Property `value` is incompatible:
                                      v
                    248:       value: {
                    249:         foodPortions: [{
                    250:           foodID: foodChickenNugget.foodID,
                    ...:
                    254:       },
                               ^ object literal. This type is incompatible with
                      8:   value: {| foodPortion: ServiceFoodPortion |},
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8
                      Property `foodPortions` is incompatible:
                                          v
                        248:       value: {
                        249:         foodPortions: [{
                        250:           foodID: foodChickenNugget.foodID,
                        ...:
                        254:       },
                                   ^ property `foodPortions`. Property not found in
                          8:   value: {| foodPortion: ServiceFoodPortion |},
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See: src/types/ServiceTranslationSegmentDiet.js:8


Found 45 errors
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
